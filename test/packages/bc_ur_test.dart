import 'package:flutter_test/flutter_test.dart';
import 'package:cbor/cbor.dart';
import 'package:ur/ur_decoder.dart';

void main() {
  group('BC-UR Decoder Tests', () {
    test(
        '[keystone(multicoin) + bluewallet]: should decode crypto-account UR and extract values correctly',
        () {
      final urParts = [
        'UR:CRYPTO-ACCOUNT/5586-3/LPCFBZTDAXCFADMOCYTONTCWIOHDLNRSLSDYPAFZFEMWGRHPYLEYGWDWDPTILRYKHPFZBTDRDWMKFEFHLOHDQZCXIMAEGUDALFVYSFWSBGADNSDSCMFHDKSAFHCERODSZMCEDLHPPASGQZDMPYPLHDNYDADSENPLSWFPUYREGLWYPMSNCLPLRLBARDDEFDLYCKJNGSKGNTDSRTPLUTTPEYMUONTPAXEYONUEHYDTRSHGLTJEDTGHYLWSFRRDIMCKTSLFTLFWAADYOLURHHEHIYCNJSLTWKKEJTIAECSAYTGOMUAOPD',
        'UR:CRYPTO-ACCOUNT/5587-3/LPCFBZTEAXCFADMOCYTONTCWIOHDLNATAYJECTTAADMUTAADDLOSAOWKAXHDCLAXPSCWJYAYREQDBASBQDCNZEOTDIBWTLWPDWGAFGKESOHLNDQDIAUOHYPMDNGEUYZMAAHDCXTOTSMTSFWNEEZMTEIYLBTPDLWNEOKGCABAIHNYMHNESESWEHWKDAZMGMASSTMDLKAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSDWYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYMWENSGWMNTURRSEC',
        'UR:CRYPTO-ACCOUNT/5588-3/LPCFBZTYAXCFADMOCYTONTCWIOHDLNOEADCYTOGWNTAMAOLSTAADMWTAADDLOSAOWKAXHDCLAOSKYTWDKECPFRRTETTKZSTSHKZOGSURPRSKRSRFCHFHZMHTGYVDMOJPMHPDHLCNIDAAHDCXFYUEDEYLPDESGLTPRFGRKETACXGRTIGOINVDHNNBSTSFKPNTPYKGKGJLCYDPTTASAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYLBQDCMFY',
        'UR:CRYPTO-ACCOUNT/5589-3/LPCFBZTLAXCFADMOCYTONTCWIOHDLNOEADCYTOGWNTAMAOLSTAADMWTAADDLOSAOWKAXHDCLAOSKYTWDKECPFRRTETTKZSTSHKZOGSURPRSKRSRFCHFHZMHTGYVDMOJPMHPDHLCNIDAAHDCXFYUEDEYLPDESGLTPRFGRKETACXGRTIGOINVDHNNBSTSFKPNTPYKGKGJLCYDPTTASAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCEWEEEIY',
        'UR:CRYPTO-ACCOUNT/5590-3/LPCFBZTBAXCFADMOCYTONTCWIOHDLNROLUHPPLNLFYATMOHTTPMDGTTPDMLOONYNYLHPKKCPNLDNGRWKFRKGGELSGTBWLNSOPLPDLEMUUYHHATMDKPVLKNJLBBHFIATAZOFYBSMDIYHHKSURNEGYLUZTHTZECFHEYKFTSWRKDNJYFSGMVTISLNZSNETSCYLOTAYARTKBFYDIWNBNUOTPDYMUOTADAOAOAMURTPEHMUOELTNNDTOYYKYKYKYKYLCSTYLYTDNDAHAEAAUETPEHMOOTLPLRWKJYJYYLAXAYBGVEZCREJS',
        'UR:CRYPTO-ACCOUNT/5591-3/LPCFBZTSAXCFADMOCYTONTCWIOHDLNCYLEFPHNTBTAADMHTAADMWTAADDLOSAOWKAXHDCLAXNDWYPRCKFLHKJSFXKPUOKECKYLGUSWGSINNLRODTIDUOLPECFEPAWNPYJEWPGMRPAAHDCXZMUYMYOTBDWZSTHGLTGAJSRDIDBDFHWEATLDMYVAHTHDCWJLBZJPLSRKBYHYBKCXAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYJSFXWSNT',
        'UR:CRYPTO-ACCOUNT/5592-3/LPCFBZTPAXCFADMOCYTONTCWIOHDLNRSLSDYPAFZFEMWGRHPYLEYGWDWDPTILRYKHPFZBTDRDWMKFEFHLOHDQZCXIMAEGUDALFVYSFWSBGADNSDSCMFHDKSAFHCERODSZMCEDLHPPASGQZDMPYPLHDNYDADSENPLSWFPUYREGLWYPMSNCLPLRLBARDDEFDLYCKJNGSKGNTDSRTPLUTTPEYMUONTPAXEYONUEHYDTRSHGLTJEDTGHYLWSFRRDIMCKTSLFTLFWAADYOLURHHEHIYCNJSLTWKKEJTIAECSAYTFHFNHPKB',
        'UR:CRYPTO-ACCOUNT/5593-3/LPCFBZTAAXCFADMOCYTONTCWIOHDLNONASJSTTMTNSMDUYLFYNOLMTDPAOKTLNADHDCSDWDTRLKOYLCLTKADSKIACTUODLFRKPPRBKOTKGMKDKBSJYVLOYYLKNPMGALGMWWTKIWEREMOMWTTJOCLZOMETSVYHSDTMYDYHSTSFETTFZSGPDCLGYGHVOEODIMWJZWYYLIMSRDWVTPYAATAAXEHOXTPADEYOTATHECFCEHFADJKCSOYYLCYFRGWISAACFSNFDFYATEOOYAMHLADSSCPYKLTAEZTNYHNECSGVLADMHNNDP',
        'UR:CRYPTO-ACCOUNT/5594-3/LPCFBZTNAXCFADMOCYTONTCWIOHDLNOEADCYTOGWNTAMAOLSTAADMWTAADDLOSAOWKAXHDCLAOSKYTWDKECPFRRTETTKZSTSHKZOGSURPRSKRSRFCHFHZMHTGYVDMOJPMHPDHLCNIDAAHDCXFYUEDEYLPDESGLTPRFGRKETACXGRTIGOINVDHNNBSTSFKPNTPYKGKGJLCYDPTTASAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYFXBZSEHP',
        'UR:CRYPTO-ACCOUNT/5595-3/LPCFBZUYAXCFADMOCYTONTCWIOHDLNCYLEFPHNTBTAADMHTAADMWTAADDLOSAOWKAXHDCLAXNDWYPRCKFLHKJSFXKPUOKECKYLGUSWGSINNLRODTIDUOLPECFEPAWNPYJEWPGMRPAAHDCXZMUYMYOTBDWZSTHGLTGAJSRDIDBDFHWEATLDMYVAHTHDCWJLBZJPLSRKBYHYBKCXAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYLUHKKESW',
        'UR:CRYPTO-ACCOUNT/5596-3/LPCFBZUOAXCFADMOCYTONTCWIOHDLNROLUHPPLNLFYATMOHTTPMDGTTPDMLOONYNYLHPKKCPNLDNGRWKFRKGGELSGTBWLNSOPLPDLEMUUYHHATMDKPVLKNJLBBHFIATAZOFYBSMDIYHHKSURNEGYLUZTHTZECFHEYKFTSWRKDNJYFSGMVTISLNZSNETSCYLOTAYARTKBFYDIWNBNUOTPDYMUOTADAOAOAMURTPEHMUOELTNNDTOYYKYKYKYKYLCSTYLYTDNDAHAEAAUETPEHMOOTLPLRWKJYJYYLAXAYBGMNGMWPOS',
        'UR:CRYPTO-ACCOUNT/5597-3/LPCFBZUTAXCFADMOCYTONTCWIOHDLNCYLEFPHNTBTAADMHTAADMWTAADDLOSAOWKAXHDCLAXNDWYPRCKFLHKJSFXKPUOKECKYLGUSWGSINNLRODTIDUOLPECFEPAWNPYJEWPGMRPAAHDCXZMUYMYOTBDWZSTHGLTGAJSRDIDBDFHWEATLDMYVAHTHDCWJLBZJPLSRKBYHYBKCXAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYCWWPRPGR',
        'UR:CRYPTO-ACCOUNT/5598-3/LPCFBZUEAXCFADMOCYTONTCWIOHDLNROLUHPPLNLFYATMOHTTPMDGTTPDMLOONYNYLHPKKCPNLDNGRWKFRKGGELSGTBWLNSOPLPDLEMUUYHHATMDKPVLKNJLBBHFIATAZOFYBSMDIYHHKSURNEGYLUZTHTZECFHEYKFTSWRKDNJYFSGMVTISLNZSNETSCYLOTAYARTKBFYDIWNBNUOTPDYMUOTADAOAOAMURTPEHMUOELTNNDTOYYKYKYKYKYLCSTYLYTDNDAHAEAAUETPEHMOOTLPLRWKJYJYYLAXAYBGFDWYPDVL',
        'UR:CRYPTO-ACCOUNT/5599-3/LPCFBZURAXCFADMOCYTONTCWIOHDLNCALFDRLBBSTPMOGATPDMEOUYYKDWZMCNYLPEFXGOBDDMHLRFTLWKKNMYVTGMTKPTWZUYCYLADYNBSSCNNYADAEUYMKJTZODRGHJLQZJPKSTETOWPBAWSJOJOJNLGCTKSKOKNBKOSJZJTONKIMKFDGATSPLKIVEFSCERECMEMBBLTBDBYOSTPADEOOEATTAAXDYONTPLTDEMYWKLNWEEHAEAOWSTORDNECESNGSNYURAOEOONTPLPDYHFLYJOAXWKLOWYMSENSAWNFTEMSBCT',
        'UR:CRYPTO-ACCOUNT/5600-3/LPCFBZVTAXCFADMOCYTONTCWIOHDLNCYLEFPHNTBTAADMHTAADMWTAADDLOSAOWKAXHDCLAXNDWYPRCKFLHKJSFXKPUOKECKYLGUSWGSINNLRODTIDUOLPECFEPAWNPYJEWPGMRPAAHDCXZMUYMYOTBDWZSTHGLTGAJSRDIDBDFHWEATLDMYVAHTHDCWJLBZJPLSRKBYHYBKCXAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYTOGWNTAMAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYUOCXFGUO'
      ];

      final decodedData = decodeAndVerifyUR(urParts);
      // 필요한 경우 decodedData를 사용하여 추가 검증 수행
    });

    test(
        '[keystone(bct-only) + nunchuk]: should decode crypto-account UR and extract values correctly',
        () {
      final urParts = [
        'UR:CRYPTO-ACCOUNT/393-3/LPCFADLDAXCFADMOCYHEBDONCMHDLNCYFPLYFETLTAADMHTAADMWTAADDLOSAOWKAXHDCLAXBASOOELNRESRCHCLENLUPMTPTSRYGHSPMTFSSNUEGYBKJNAYKEIDSKDEFXDTWDSOAAHDCXLTISMSMYIALATLIYMSFRTKCMIHWKLOHYPTSKTNJKDECFBTLDNYCSAXSGHTGMFGDYAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYJYCTZCFH',
        'UR:CRYPTO-ACCOUNT/394-3/LPCFADLEAXCFADMOCYHEBDONCMHDLNTSMUVTCTUOJNJKGRHPYLEYGWDWDPTILRWKYLDMFYKKYKMSKOVOVDFSIYKERYNLSKLTSOGLJOHDMTVSFDPRAYWLDIESHPYKDICTJOSTPEKPASFLFPAEGWGSNBGAJPOXJEWKFNHTTSWFGOAEDAWTAHTKMYADVYIAPFBYBTLUTDHYKISSFPNLUTTPEYMUONTPAXEYONUEHYDTRSHGLTJEDTGHYLWSSNDAFWYTCLWMIDLGVLDYOLURHHEHIYCNJSLTWKKEJTGMBBJOBEJORPVDRN',
        'UR:CRYPTO-ACCOUNT/395-3/LPCFADLUAXCFADMOCYHEBDONCMHDLNJLTEKGIDTAADMUTAADDLOSAOWKAXHDCLAOAEKPFSHPYAWSSNZMESJKNTCXFTWKBASSMSZOFMSWFWROSNBBRLGMETZMSBMKFYIMAAHDCXWPHHCWESOSBBFPCAFZAXMDWZRPLNSWIAGSDNJZKNCEGYOYMERNPLUTGASKDRJNVLAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSDWYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYONCHKSAOHHRKBYLE',
        'UR:CRYPTO-ACCOUNT/396-3/LPCFADLKAXCFADMOCYHEBDONCMHDLNTSMUVTCTUOJNJKGRHPYLEYGWDWDPTILRWKYLDMFYKKYKMSKOVOVDFSIYKERYNLSKLTSOGLJOHDMTVSFDPRAYWLDIESHPYKDICTJOSTPEKPASFLFPAEGWGSNBGAJPOXJEWKFNHTTSWFGOAEDAWTAHTKMYADVYIAPFBYBTLUTDHYKISSFPNLUTTPEYMUONTPAXEYONUEHYDTRSHGLTJEDTGHYLWSSNDAFWYTCLWMIDLGVLDYOLURHHEHIYCNJSLTWKKEJTGMBBJOBEVTAXDPEO',
        'UR:CRYPTO-ACCOUNT/397-3/LPCFADLGAXCFADMOCYHEBDONCMHDLNSNTDHSHTASQZJPUYLFYNOLMTDPAOKTLNAEWKKOIHKNZOHYTYIEGMZEJSHLLUBGISHECKWFDKMHAETLLPJZHKVLGEEHDIMSVOEMEOWYFERFBTCTHSLTDIUYDLDRWZJSBTIAATMDSEMTOYLOKGHKRTBZZTDTYAJTESLUBZLOCSAADLLFJSNSAATAAXEHOXTPADEYOTATHECFCEHFADJKCSOYYLCYSNTIFZVLCFFRTSJZVTEOOYAMHLADSSCPYKLTAEZTNYGYBBKSBKRFSGVYEH',
        'UR:CRYPTO-ACCOUNT/398-3/LPCFADMNAXCFADMOCYHEBDONCMHDLNCYFPLYFETLTAADMHTAADMWTAADDLOSAOWKAXHDCLAXBASOOELNRESRCHCLENLUPMTPTSRYGHSPMTFSSNUEGYBKJNAYKEIDSKDEFXDTWDSOAAHDCXLTISMSMYIALATLIYMSFRTKCMIHWKLOHYPTSKTNJKDECFBTLDNYCSAXSGHTGMFGDYAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYLTWKBZMH',
        'UR:CRYPTO-ACCOUNT/399-3/LPCFADMYAXCFADMOCYHEBDONCMHDLNROFZNDKIAHJZVTMOHTTPMDGTTPDMLOONYNYLHPKKCPBTKSRKCAUEGLZOHHLTJNSBFXHYREGLNNTYGDLPOLRSRKCTSWMHJNIAKPJYNEMYNLGOHHKSOSHPBTRYASJSEHNLFWRDNSQZRSKBJZHEWPGHJTCKRSGWRNYTTYDIVAEHHPOXSKJOFRUOTPDYMUOTADAOAOAMURTPEHMUOELTNNDTOYYKYKYKYKYLCSCPVSIHGHVOAEAAUETPEHMOOTLPLRWKJYJYYLAXAYBGMWJTBTLR',
        'UR:CRYPTO-ACCOUNT/400-3/LPCFADMHAXCFADMOCYHEBDONCMHDLNCYFPLYFETLTAADMHTAADMWTAADDLOSAOWKAXHDCLAXBASOOELNRESRCHCLENLUPMTPTSRYGHSPMTFSSNUEGYBKJNAYKEIDSKDEFXDTWDSOAAHDCXLTISMSMYIALATLIYMSFRTKCMIHWKLOHYPTSKTNJKDECFBTLDNYCSAXSGHTGMFGDYAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYETAHZMWD',
        'UR:CRYPTO-ACCOUNT/401-3/LPCFADMEAXCFADMOCYHEBDONCMHDLNKPMOZSDIBNTPMOGATPDMEOUYYKDWZMCNYNAXDPCEHDYNDSJLKKLKPFLEADBNLBOTCEFZFGIMBATYLPAESGVAHDGOYLRLZSLYFWFLJSSGDAHDFXCFCXKETBMOCNLSFZMWCLRYASKPDTURVEDKREMWKGVOMTRLTIRTHEEYJTDTHELUFLADOSTPADEOOEATTAAXDYONTPLTDEMYWKLNWEEHAEAOWSETDARLZOFRTEPRETAOEOONTPLPDYHFLYJOAXWKLOWYOLCHJOCSLETYNDCF',
      ];

      final decodedData = decodeAndVerifyUR(urParts);
      // 필요한 경우 decodedData를 사용하여 추가 검증 수행
    });

    test(
        '[keystone(bct-only) + bluewallet]: should decode crypto-account UR and extract values correctly',
        () {
      final urParts = [
        'UR:CRYPTO-ACCOUNT/12-3/LPBNAXCFADMOCYHEBDONCMHDLNSNTDHSHTASQZJPUYLFYNOLMTDPAOKTLNAEWKKOIHKNZOHYTYIEGMZEJSHLLUBGISHECKWFDKMHAETLLPJZHKVLGEEHDIMSVOEMEOWYFERFBTCTHSLTDIUYDLDRWZJSBTIAATMDSEMTOYLOKGHKRTBZZTDTYAJTESLUBZLOCSAADLLFJSNSAATAAXEHOXTPADEYOTATHECFCEHFADJKCSOYYLCYSNTIFZVLCFFRTSJZVTEOOYAMHLADSSCPYKLTAEZTNYGYBBKSBKVWCXSNID',
        'UR:CRYPTO-ACCOUNT/13-3/LPBTAXCFADMOCYHEBDONCMHDLNOEADCYETTIREVYAOLSTAADMWTAADDLOSAOWKAXHDCLAXPACFNDJELGWPKIPAVAIYNDLDAYCYHFFWJNFDKSWYPAJPTOWPBSOLHLEMRPIHGDGYAAHDCXEONYEYIMWNVEZMTLLYGUOETNLEVEADFEMEQZJNMSHFQDJOGLFHVWZOADYNLSFZFMAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYHGWNPTME',
        'UR:CRYPTO-ACCOUNT/14-3/LPBAAXCFADMOCYHEBDONCMHDLNROFZNDKIAHJZVTMOHTTPMDGTTPDMLOONYNYLHPKKCPBTKSRKCAUEGLZOHHLTJNSBFXHYREGLNNTYGDLPOLRSRKCTSWMHJNIAKPJYNEMYNLGOHHKSOSHPBTRYASJSEHNLFWRDNSQZRSKBJZHEWPGHJTCKRSGWRNYTTYDIVAEHHPOXSKJOFRUOTPDYMUOTADAOAOAMURTPEHMUOELTNNDTOYYKYKYKYKYLCSCPVSIHGHVOAEAAUETPEHMOOTLPLRWKJYJYYLAXAYBGSNLRCLTS',
        'UR:CRYPTO-ACCOUNT/15-3/LPBSAXCFADMOCYHEBDONCMHDLNTSMUVTCTUOJNJKGRHPYLEYGWDWDPTILRWKYLDMFYKKYKMSKOVOVDFSIYKERYNLSKLTSOGLJOHDMTVSFDPRAYWLDIESHPYKDICTJOSTPEKPASFLFPAEGWGSNBGAJPOXJEWKFNHTTSWFGOAEDAWTAHTKMYADVYIAPFBYBTLUTDHYKISSFPNLUTTPEYMUONTPAXEYONUEHYDTRSHGLTJEDTGHYLWSSNDAFWYTCLWMIDLGVLDYOLURHHEHIYCNJSLTWKKEJTGMBBJOBELBGOFEDK',
      ];

      final decodedData = decodeAndVerifyUR(urParts);
      // 필요한 경우 decodedData를 사용하여 추가 검증 수행
    });

    test(
        '[keystone(bct-only) + sparrow (additionally P2TR)]: should decode crypto-account UR and extract values correctly',
        () {
      final urParts = [
        'UR:CRYPTO-ACCOUNT/7-3/LPATAXCFAOBBCYMOLRJELPHDPROEADCYETTIREVYAOLRTAADMWTAADDLOSAOWKAXHDCLAXPACFNDJELGWPKIPAVAIYNDLDAYCYHFFWJNFDKSWYPAJPTOWPBSOLHLEMRPIHGDGYAAHDCXEONYEYIMWNVEZMTLLYGUOETNLEVEADFEMEQZJNMSHFQDJOGLFHVWZOADYNLSFZFMAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYFPLYFETLTAADMHTAADMWTAADDLOSAOWKAXHDCLAXBASOOELNRESRCHCLENLUPMTPTSRYGHSPMTFSSNUEGYBKJNGMAENEHF',
        'UR:CRYPTO-ACCOUNT/8-3/LPAYAXCFAOBBCYMOLRJELPHDPRPKKIKSZCYAYNSPVSGTUTHKQZHYINRODEHSJYTBFMRPETKBBSZENEAHPRTYJYFNBZQDMHAHMUSFHTJTLFCPRFYLFWSBECBAMSZMENRPIOGDHGUTHKBEMHNDQZJPRTBYZMCXLYOLNBRTPREEQZOXMORLIMGLHGLSTDGWRKVWBSLYAOLAFZENCTRPTDGERTTPADMETAATYNOLEYHGAOUEESHFYKKPSPHPBTWETSSTWLSWKECNESWFTSSKOSHKFHFWFWGSGTVTQZGMDYVWLECFADRSUTHKPFECHLMYVTOLFRVACTQZAESNTERELOBSSESGNNPEJNFSIODRFNIYKKHNCABTRFGDDMUYLOBDHHDASFDTZM',
        'UR:CRYPTO-ACCOUNT/9-3/LPASAXCFAOBBCYMOLRJELPHDPROEADCYETTIREVYAOLRTAADMWTAADDLOSAOWKAXHDCLAXPACFNDJELGWPKIPAVAIYNDLDAYCYHFFWJNFDKSWYPAJPTOWPBSOLHLEMRPIHGDGYAAHDCXEONYEYIMWNVEZMTLLYGUOETNLEVEADFEMEQZJNMSHFQDJOGLFHVWZOADYNLSFZFMAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSGHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYFPLYFETLTAADMHTAADMWTAADDLOSAOWKAXHDCLAXBASOOELNRESRCHCLENLUPMTPTSRYGHSPMTFSSNUEGYBKJNWMZEYNHD',
        'UR:CRYPTO-ACCOUNT/10-3/LPBKAXCFAOBBCYMOLRJELPHDPRAYKEIDSKDEFXDTWDSOAAHDCXLTISMSMYIALATLIYMSFRTKCMIHWKLOHYPTSKTNJKDECFBTLDNYCSAXSGHTGMFGDYAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSEHYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYJLTEKGIDTAADMUTAADDLOSAOWKAXHDCLAOAEKPFSHPYAWSSNZMESJKNTCXFTWKBASSMSZOFMSWFWROSNBBRLGMETZMSBMKFYIMAAHDCXWPHHCWESOSBBFPCAFZAXMDWZRPLNSWIAGSDNJZKNCEGYOYMERNPLUTGASKDRJNVLAHTAADEHZEVTYTME',
        'UR:CRYPTO-ACCOUNT/11-3/LPBDAXCFAOBBCYMOLRJELPHDPROEADAEAOAEAMTAADDYOTADLNCSDWYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYONCHKSAOTAADNLTAADDLOSAOWKAXHDCLAXPKGUCPFWSOLRJSGHBEFTLDEONBOXCYBEFWLRAHHNQDIENYRKHPDSIEEHOEDTENWEAAHDCXCYLPRLEOYTBDWFCAPYOEFEMOTTZEVYAABEFZCFGRPDFEVANYJYLUBDSWBATDLGMYAHTAADEHOEADAEAOAEAMTAADDYOTADLNCSHFYKAEYKAEYKAOCYETTIREVYAXAXATTAADDYOEADLRAEWKLAWKAXAEAYCYBNKPTIPLAEAEASCHVLMH',
      ];

      final decodedData = decodeAndVerifyUR(urParts);
      // 필요한 경우 decodedData를 사용하여 추가 검증 수행
    });

    // test('should handle invalid UR data gracefully', () {
    //   final invalidUrPart = 'UR:INVALID-DATA/1-1/ABCDEF';
    //   final decoder = URDecoder();

    //   expect(() => decoder.receivePart(invalidUrPart), throwsException,
    //       reason: 'Should throw exception for invalid UR data');
    // });
  });
}

Map<String, dynamic> decodeAndVerifyUR(List<String> urParts) {
  final decoder = URDecoder();

  // UR 조각들을 디코딩
  int index = 0;
  for (final part in urParts) {
    print('Part $index: ${decoder.receivePart(part)}');
    index++;
  }

  expect(decoder.isComplete(), true, reason: 'UR decoding should be complete');

  final ur = decoder.result;
  final cborBytes = ur.cbor;

  // CBOR 바이트 배열을 디코딩하여 Dart 객체로 변환
  final decodedCbor = cbor.decode(cborBytes);
  expect(decodedCbor, isA<Map>(), reason: 'Decoded CBOR should be a Map');

  Map<dynamic, dynamic> cborMap = decodedCbor as Map<dynamic, dynamic>;
  Map<String, dynamic> jsonCompatibleMap = convertKeysToString(cborMap);

  // MFP 값 검증
  var mfpValue = jsonCompatibleMap["1"].toInt().toRadixString(16).toUpperCase();
  expect(mfpValue, isA<String>(), reason: 'MFP value should be a hex string');

  // 공개키와 체인코드 검증
  var accountData = jsonCompatibleMap["2"][0];
  expect(accountData["3"], isNotNull, reason: 'Public key should exist');
  expect(accountData["4"], isNotNull, reason: 'Chain code should exist');

  return jsonCompatibleMap;
}

Map<String, dynamic> convertKeysToString(Map<dynamic, dynamic> map) {
  return map.map((key, value) {
    String newKey = key.toString();
    dynamic newValue;
    if (value is Map) {
      newValue = convertKeysToString(value);
    } else if (value is List) {
      newValue = value.map((item) {
        if (item is Map) {
          return convertKeysToString(item);
        } else {
          return item;
        }
      }).toList();
    } else {
      newValue = value;
    }
    return MapEntry(newKey, newValue);
  });
}
