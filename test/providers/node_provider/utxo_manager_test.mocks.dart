// Mocks generated by Mockito 5.4.4 from annotations
// in coconut_wallet/test/providers/node_provider/utxo_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:coconut_lib/coconut_lib.dart' as _i9;
import 'package:coconut_wallet/enums/network_enums.dart' as _i6;
import 'package:coconut_wallet/model/node/node_provider_state.dart' as _i4;
import 'package:coconut_wallet/model/node/wallet_update_info.dart' as _i11;
import 'package:coconut_wallet/providers/node_provider/isolate/isolate_state_manager.dart'
    as _i12;
import 'package:coconut_wallet/providers/node_provider/state_manager.dart'
    as _i10;
import 'package:coconut_wallet/services/electrum_service.dart' as _i5;
import 'package:coconut_wallet/services/model/response/block_timestamp.dart'
    as _i3;
import 'package:coconut_wallet/services/model/response/electrum_response_types.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeServerFeaturesRes_0 extends _i1.SmartFake
    implements _i2.ServerFeaturesRes {
  _FakeServerFeaturesRes_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlockTimestamp_1 extends _i1.SmartFake
    implements _i3.BlockTimestamp {
  _FakeBlockTimestamp_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetBalanceRes_2 extends _i1.SmartFake implements _i2.GetBalanceRes {
  _FakeGetBalanceRes_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlockHeaderSubscribe_3 extends _i1.SmartFake
    implements _i2.BlockHeaderSubscribe {
  _FakeBlockHeaderSubscribe_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeProviderState_4 extends _i1.SmartFake
    implements _i4.NodeProviderState {
  _FakeNodeProviderState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ElectrumService].
///
/// See the documentation for Mockito's code generation for more information.
class MockElectrumService extends _i1.Mock implements _i5.ElectrumService {
  MockElectrumService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get reqId => (super.noSuchMethod(
        Invocation.getter(#reqId),
        returnValue: 0,
      ) as int);

  @override
  _i6.SocketConnectionStatus get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i6.SocketConnectionStatus.reconnecting,
      ) as _i6.SocketConnectionStatus);

  @override
  _i7.Future<void> connect(
    String? host,
    int? port, {
    bool? ssl = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [
            host,
            port,
          ],
          {#ssl: ssl},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String> ping() => (super.noSuchMethod(
        Invocation.method(
          #ping,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #ping,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i2.ServerFeaturesRes> serverFeatures() => (super.noSuchMethod(
        Invocation.method(
          #serverFeatures,
          [],
        ),
        returnValue:
            _i7.Future<_i2.ServerFeaturesRes>.value(_FakeServerFeaturesRes_0(
          this,
          Invocation.method(
            #serverFeatures,
            [],
          ),
        )),
      ) as _i7.Future<_i2.ServerFeaturesRes>);

  @override
  _i7.Future<List<String>> serverVersion() => (super.noSuchMethod(
        Invocation.method(
          #serverVersion,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<String> getBlockHeader(int? height) => (super.noSuchMethod(
        Invocation.method(
          #getBlockHeader,
          [height],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockHeader,
            [height],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i3.BlockTimestamp> getBlockTimestamp(int? height) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockTimestamp,
          [height],
        ),
        returnValue: _i7.Future<_i3.BlockTimestamp>.value(_FakeBlockTimestamp_1(
          this,
          Invocation.method(
            #getBlockTimestamp,
            [height],
          ),
        )),
      ) as _i7.Future<_i3.BlockTimestamp>);

  @override
  _i7.Future<Map<int, _i3.BlockTimestamp>> fetchBlocksByHeight(
          Set<int>? heights) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBlocksByHeight,
          [heights],
        ),
        returnValue: _i7.Future<Map<int, _i3.BlockTimestamp>>.value(
            <int, _i3.BlockTimestamp>{}),
      ) as _i7.Future<Map<int, _i3.BlockTimestamp>>);

  @override
  _i7.Future<num> estimateFee(int? targetConfirmation) => (super.noSuchMethod(
        Invocation.method(
          #estimateFee,
          [targetConfirmation],
        ),
        returnValue: _i7.Future<num>.value(0),
      ) as _i7.Future<num>);

  @override
  _i7.Future<_i2.GetBalanceRes> getBalance(
    _i9.AddressType? addressType,
    String? address,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBalance,
          [
            addressType,
            address,
          ],
        ),
        returnValue: _i7.Future<_i2.GetBalanceRes>.value(_FakeGetBalanceRes_2(
          this,
          Invocation.method(
            #getBalance,
            [
              addressType,
              address,
            ],
          ),
        )),
      ) as _i7.Future<_i2.GetBalanceRes>);

  @override
  _i7.Future<List<_i2.GetHistoryRes>> getHistory(
    _i9.AddressType? addressType,
    String? address,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistory,
          [
            addressType,
            address,
          ],
        ),
        returnValue:
            _i7.Future<List<_i2.GetHistoryRes>>.value(<_i2.GetHistoryRes>[]),
      ) as _i7.Future<List<_i2.GetHistoryRes>>);

  @override
  _i7.Future<List<_i2.ListUnspentRes>> getUnspentList(
    _i9.AddressType? addressType,
    String? address,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnspentList,
          [
            addressType,
            address,
          ],
        ),
        returnValue:
            _i7.Future<List<_i2.ListUnspentRes>>.value(<_i2.ListUnspentRes>[]),
      ) as _i7.Future<List<_i2.ListUnspentRes>>);

  @override
  _i7.Future<List<_i2.GetMempoolRes>> getMempool(
    _i9.AddressType? addressType,
    String? address,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMempool,
          [
            addressType,
            address,
          ],
        ),
        returnValue:
            _i7.Future<List<_i2.GetMempoolRes>>.value(<_i2.GetMempoolRes>[]),
      ) as _i7.Future<List<_i2.GetMempoolRes>>);

  @override
  _i7.Future<String> broadcast(String? rawTransaction) => (super.noSuchMethod(
        Invocation.method(
          #broadcast,
          [rawTransaction],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #broadcast,
            [rawTransaction],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<String> getTransaction(
    String? txHash, {
    bool? verbose,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransaction,
          [txHash],
          {#verbose: verbose},
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getTransaction,
            [txHash],
            {#verbose: verbose},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<List<_i9.Transaction>> getPreviousTransactions(
    _i9.Transaction? transaction, {
    List<_i9.Transaction>? existingTxList,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPreviousTransactions,
          [transaction],
          {#existingTxList: existingTxList},
        ),
        returnValue:
            _i7.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i7.Future<List<_i9.Transaction>>);

  @override
  _i7.Future<List<List<num>>> getMempoolFeeHistogram() => (super.noSuchMethod(
        Invocation.method(
          #getMempoolFeeHistogram,
          [],
        ),
        returnValue: _i7.Future<List<List<num>>>.value(<List<num>>[]),
      ) as _i7.Future<List<List<num>>>);

  @override
  _i7.Future<_i2.BlockHeaderSubscribe> getCurrentBlock() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentBlock,
          [],
        ),
        returnValue: _i7.Future<_i2.BlockHeaderSubscribe>.value(
            _FakeBlockHeaderSubscribe_3(
          this,
          Invocation.method(
            #getCurrentBlock,
            [],
          ),
        )),
      ) as _i7.Future<_i2.BlockHeaderSubscribe>);

  @override
  _i7.Future<String?> subscribeScript(
    _i9.AddressType? addressType,
    String? address, {
    required dynamic Function(
      String,
      String?,
    )? onUpdate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeScript,
          [
            addressType,
            address,
          ],
          {#onUpdate: onUpdate},
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<bool> unsubscribeScript(
    _i9.AddressType? addressType,
    String? address,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeScript,
          [
            addressType,
            address,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [NodeStateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNodeStateManager extends _i1.Mock implements _i10.NodeStateManager {
  MockNodeStateManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.NodeProviderState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNodeProviderState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.NodeProviderState);

  @override
  void setState({
    _i6.MainClientState? newConnectionState,
    Map<int, _i11.WalletUpdateInfo>? newUpdatedWallets,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setState,
          [],
          {
            #newConnectionState: newConnectionState,
            #newUpdatedWallets: newUpdatedWallets,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initWalletUpdateStatus(int? walletId) => super.noSuchMethod(
        Invocation.method(
          #initWalletUpdateStatus,
          [walletId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addWalletSyncState(
    int? walletId,
    _i6.UpdateElement? updateType,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addWalletSyncState,
          [
            walletId,
            updateType,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addWalletCompletedState(
    int? walletId,
    _i6.UpdateElement? updateType,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addWalletCompletedState,
          [
            walletId,
            updateType,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addWalletCompletedAllStates(int? walletId) => super.noSuchMethod(
        Invocation.method(
          #addWalletCompletedAllStates,
          [walletId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleIsolateStateMessage(_i12.IsolateStateMessage? message) =>
      super.noSuchMethod(
        Invocation.method(
          #handleIsolateStateMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterWalletUpdateState(int? walletId) => super.noSuchMethod(
        Invocation.method(
          #unregisterWalletUpdateState,
          [walletId],
        ),
        returnValueForMissingStub: null,
      );
}
