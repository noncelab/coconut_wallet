plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def getFlavor() {
    def taskNames = gradle.startParameter.taskNames
    if (taskNames.any { it.toLowerCase().contains("regtest")}) {
        return "regtest"
    } else if (taskNames.any { it.toLowerCase().contains("mainnet")}) {
        return "mainnet"
    }
    throw GradleException("❌ build flavor를 추론할 수 없습니다. taskNames: ${taskNames}")
}
def flavor = getFlavor()
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key_${flavor}.properties")
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
} else {
    throw GradleException("❌ keystore properties 파일이 존재하지 않습니다: ${keystorePropertiesFile}")
}

android {
    namespace "onl.coconut.wallet"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "onl.coconut.wallet"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "network"
    productFlavors {
         regtest {
            dimension "network"
            resValue "string", "app_name", "코코넛 월렛 학습용"
            applicationIdSuffix ".regtest"
            versionNameSuffix "-regtest"
        }
        mainnet {
            dimension "network"
            resValue "string", "app_name", "코코넛 월렛"
            applicationIdSuffix ""
            versionNameSuffix ""
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.core:core-splashscreen:1.0.0"
}
