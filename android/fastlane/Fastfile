# android/fastlane/Fastfile
default_platform(:android)

require 'yaml'

# 루트/안드로이드 경로
ROOT_DIR     = File.expand_path(File.join(__dir__, "..", ".."))
ANDROID_DIR  = File.join(ROOT_DIR, "android")

# ---------- Helpers ----------
def read_pubspec_versions
  YAML.load_file(File.join(ROOT_DIR, "pubspec.yaml"))
end

# 평면 키: aos_regtest / aos_mainnet
def version_tuple_for(platform:, flavor:)
  yml = read_pubspec_versions
  key = "#{platform}_#{flavor}"
  raw = yml.dig("app_versions", key) || yml["version"]
  UI.user_error!("version string not found in pubspec.yaml for key: app_versions.#{key} (and no global 'version')") unless raw
  m = raw.to_s.match(/\A(\d+\.\d+\.\d+)\+(\d+)\z/)
  UI.user_error!("version format must be x.y.z+build, got: #{raw}") unless m
  marketing = m[1]
  build     = m[2].to_i
  return marketing, build
end

# pubspec.yaml의 특정 키(aos_regtest 등)만 빌드넘버 +1 (주석/포맷 보존)
def update_pubspec_build_number(platform:, flavor:, marketing:, old_build:, new_build:)
  yml_path = File.join(ROOT_DIR, "pubspec.yaml")
  text = File.read(yml_path)

  key = "#{platform}_#{flavor}:"
  # 예: "  aos_regtest: 3.3.1+49"
  pattern = /^(\s*#{Regexp.escape(key)}\s*)(\d+\.\d+\.\d+)\+(\d+)/

  replaced = text.gsub(pattern) do
    prefix = Regexp.last_match(1)
    ver    = Regexp.last_match(2)
    bld    = Regexp.last_match(3).to_i
    "#{prefix}#{ver}+#{bld + 1}"
  end

  if replaced == text
    UI.user_error!("❌ 해당 항목을 찾지 못했습니다: #{key}")
  else
    File.write(yml_path, replaced)
    UI.message("✅ pubspec.yaml updated (#{key.strip}): #{marketing}+#{old_build} → #{marketing}+#{new_build}")
  end
end

# AAB 경로 찾기 (flavor Release 산출물)
def find_latest_aab(flavor:)
  Dir[File.join(ROOT_DIR, "build/app/outputs/bundle/#{flavor}Release/*.aab")].max_by { |f| File.mtime(f) }
end

# ---------- Lanes ----------
platform :android do
  desc "Release Android REGTEST to Play (pubspec에서 읽고, 성공 시 build +1)"
  lane :release_android_regtest do
    platform_ = "aos"
    flavor    = "regtest"
    package   = "onl.coconut.wallet.regtest"  # ← regtest 패키지명

    # 1) 버전 읽기
    marketing, old_build = version_tuple_for(platform: platform_, flavor: flavor)
    new_build = old_build + 1
    UI.message("Android/#{flavor} -> versionName=#{marketing}, versionCode=#{new_build}")

    begin
      # (선택) Fastlane 기본 package_name(Appfile)을 override
      ENV["SUPPLY_PACKAGE_NAME"] = package

      # 2) Flutter 빌드 (AAB)
      sh %Q{
        cd #{ROOT_DIR} &&
        fvm flutter clean &&
        fvm flutter pub get &&
        fvm flutter build appbundle \
          --flavor #{flavor} \
          --release \
          --build-name="#{marketing}" \
          --build-number=#{new_build}
      }

      # 3) 산출물 찾기
      aab_path = find_latest_aab(flavor: flavor)
      UI.user_error!("AAB not found for flavor #{flavor}") unless aab_path
      UI.message("✅ AAB: #{aab_path}")

      # 4) 업로드 (Google Play API: Appfile의 json_key_file 사용)
      upload_to_play_store(
        aab: aab_path,
        track: "internal",
        skip_upload_images: true,
        skip_upload_screenshots: true
      )

      # 5) 빌드 성공 시 pubspec.yaml 업데이트
      update_pubspec_build_number(
        platform: platform_,
        flavor: flavor,
        marketing: marketing,
        old_build: old_build,
        new_build: new_build
      )
    rescue => e
      UI.error("❌ Android build/upload failed: #{e.message}")
      UI.important("pubspec.yaml was not updated because build failed.")
      raise
    end
  end

  # (옵션) mainnet용도 미리 틀만 제공
  desc "Release Android MAINNET to Play (internal)"
  lane :release_android_mainnet do
    platform_ = "aos"
    flavor    = "mainnet"
    package   = "onl.coconut.wallet"  # ← mainnet 패키지명

    marketing, old_build = version_tuple_for(platform: platform_, flavor: flavor)
    new_build = old_build + 1
    UI.message("Android/#{flavor} -> versionName=#{marketing}, versionCode=#{new_build}")

    begin
      ENV["SUPPLY_PACKAGE_NAME"] = package

      sh %Q{
        cd #{ROOT_DIR} &&
        fvm flutter clean &&
        fvm flutter pub get &&
        fvm flutter build appbundle \
          --flavor #{flavor} \
          --release \
          --build-name="#{marketing}" \
          --build-number=#{new_build}
      }

      aab_path = find_latest_aab(flavor: flavor)
      UI.user_error!("AAB not found for flavor #{flavor}") unless aab_path

      upload_to_play_store(
        aab: aab_path,
        track: "internal",
        skip_upload_images: true,
        skip_upload_screenshots: true
      )

      update_pubspec_build_number(
        platform: platform_,
        flavor: flavor,
        marketing: marketing,
        old_build: old_build,
        new_build: new_build
      )
    rescue => e
      UI.error("❌ Android build/upload failed: #{e.message}")
      UI.important("pubspec.yaml was not updated because build failed.")
      raise
    end
  end
end